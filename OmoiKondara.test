#!/usr/bin/env ruby
require "getoptlong"
# require "debug"

############ Variables ############
  $RPM_VER    = `rpm --version`.split[2].split(/\./)[0].to_i
  if `uname -m`.chop =~ /i.86/
    $ARCH     = "i586"
  else
    $ARCH     = `uname -m`.chop
  end
  if $ARCH == "alpha"
    procinfo = `cat /proc/cpuinfo`
    procinfo.each_line do |l|
      if l =~ /^cpu model\s*:\s*EV([0-9]).*$/
        if $1 == "5"
	  $ARCH = "alphaev5"
	end
        break
      end
    end
  end
  $OS         = `uname -s`.chop.downcase
  $MIRROR     = []
  $CONF_FILES = ["./.OmoiKondara","~/.OmoiKondara","/etc/OmoiKondara.conf"]
  $TOPDIR     = ""
  $DEF_RPMOPT = "-ba"
  $FORCE      = 0
  $CVS        = 0
  $SRPM_ONLY  = 0
  $VERBOSE    = 0
  $DEBUG_FLAG = 0
  $NONFREE    = 0
  $GROUPCHECK = 0
  $SCRIPT     = 0
  $ARCH_DEP_PKGS_ONLY = 0
  $FTP_CMD    = ""
  $DISPLAY    = ":0.0"
  $hTAG       = Hash.new
  $LOG_PATH   = ""
  $LOG_FILE   = "OmoiKondara.log"
  $DEPEND_PACKAGE = ""
  $MAIN_ONLY  = 0
  if $RPM_VER <= 3
    $RPMVERCMP = "rpmvercmp"
  else
    $RPMVERCMP = "rpmvercmp.Jirai"
  end
  GREEN           = "\e[1;32m"
  RED             = "\e[1;31m"
  YELLOW          = "\e[1;33m"
  BLUE            = "\e[1;34m"
  NOCOLOR         = "\e[m"
  SUCCESS         = "Success"
  FAILURE         = "Failure"
  SKIP            = "Skip"
  OBSOLETE        = "OBSOLETE"
  RETRY_FTPSEARCH = 10
  DOMAIN          = ".jp"

  GROUPS      = [
    "Amusements/Games",
    "Amusements/Graphics",
    "Applications/Archiving",
    "Applications/Communications",
    "Applications/Databases",
    "Applications/Editors",
    "Applications/Emulators",
    "Applications/Engineering",
    "Applications/File",
    "Applications/Internet",
    "Applications/Multimedia",
    "Applications/Productivity",
    "Applications/Publishing",
    "Applications/System",
    "Applications/Text",
    "Development/Debuggers",
    "Development/Languages",
    "Development/Libraries",
    "Development/System",
    "Development/Tools",
    "Documentation",
    "System Environment/Base",
    "System Environment/Daemons",
    "System Environment/Kernel",
    "System Environment/Libraries",
    "System Environment/Shells",
    "User Interface/Desktops",
    "User Interface/X",
    "User Interface/X Hardware Support"
  ]

############ Sub functions ############
  def get_topdir (cwd = "")
    topdir = File.expand_path $TOPDIR
    if cwd != ""
      todir = Dir.glob ("#{cwd}/#{$hTAG['NAME']}/TO.*")
    else
      todir = Dir.glob ("#{$hTAG['NAME']}/TO.*")
    end
    if todir != []
      topdir = topdir + "-" + todir[0].split(/\./)[-1]
    end
    return topdir
  end

=begin -------------------------------------------------------
  exec_command: 引数 -- 実行するコマンド文字列
    引数で指定されたコマンドを実行し、出力をロ
    グに記録する。
=end ---------------------------------------------------------
  def exec_command (cmd)
    if cmd !~ /gcc\.spec/
      fCMD = open ("|#{cmd} 2>&1", "r")
    else
      fCMD = open ("|#{cmd}", "r")
    end
    fLOG = open ("#{$LOG_PATH}/#{$LOG_FILE}", "a")
    if $SCRIPT == 0
      fLOG.print "\n--[#{GREEN}#{cmd}#{NOCOLOR}]--\n"
    else
      fLOG.print "\n--[#{cmd}]--\n"
    end
    if $VERBOSE == 1
      if $SCRIPT == 0
        print "\n--[#{GREEN}\e[1;32m#{cmd}#{NOCOLOR}]--\n"
      else
        print "\n--[#{cmd}]--\n"
      end
    end
    while s = fCMD.gets
      if $VERBOSE == 1
        print s
      end
      fLOG.print s
    end
    fLOG.close
    fCMD.close
  end

=begin -------------------------------------------------------
  get_from_mirror: 引数 -- ファイル名
    引数で指定されたファイルをミラーサイトから取得する。
    .OmoiKondara に MIRROR で記述されている URL に SOURCES/
    を加えた場所から取得する
=end ---------------------------------------------------------
  def get_from_mirror (n)
    $MIRROR.each do |m|
      exec_command "#{$FTP_CMD} #{m}/SOURCES/#{n}"
      if $? == 0
        return 0
      end
    end
    return -1
  end
  
  def ftpsearch file
    searchstr = "http://ftpsearch.lycos.com/swadv/AdvResults.asp?form=advanced&query=#{file}&doit=Search&hits=20"
    if DOMAIN != ""
      searchstr += "&limdom=#{DOMAIN}"
    end
    candidate = []
    i = RETRY_FTPSEARCH
    while candidate == [] && (i -= 1) > 0
      result = `w3m -dump "#{searchstr}"`
      strip_result = result.scan /\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+(\S+)/
      candidate = strip_result.delete_if do |site, path|
        path !~ /#{file}/
      end
    end
    candidate.each do |site, path|
      url = "ftp://#{site}#{path}"
      exec_command "#{$FTP_CMD} #{url}"
      if $? == 0
        return 0
      end
    end
    return -1
  end

  def cp_local (n)
    topdir = get_topdir
    if test (?e, "#{topdir}/SOURCES/#{n}")
      if test (?e, "#{$hTAG['NAME']}/SOURCES/#{n}")
        md5SRC = `md5sum #{topdir}/SOURCES/#{n}`.split[0]
        md5DEST = `md5sum #{$hTAG['NAME']}/SOURCES/#{n}`.split[0]
        if md5SRC == md5DEST
          return 0
        end
      end
      exec_command "cp -pfv #{topdir}/SOURCES/#{n} #{$hTAG['NAME']}/SOURCES"
      return 0
    end
    return -1
  end

=begin -------------------------------------------------------
  get_no:
    NoSource/NoPatch タグで指定されているソース/パッチを
    SOURCES ディレクトリに用意する。ローカルに既に存在す
    る場合はそれを使用し、無い場合のみ記述されている URL
    から取得する。どちらにも無い場合はミラーサイトから取
    得する。
=end   -------------------------------------------------------
  def get_no (type)
    unless $hTAG.key?("NO#{type}")
      return 0
    end
    nosrc = $hTAG["NO#{type}"].split (/[\s,]/)
    nosrc.delete ""
    status = 0
    nosrc.each do |no|
      file = $hTAG["#{type}#{no}"]
      if no == "0" && file == nil
        file = $hTAG["#{type}"]
      end
      if file =~ /^(ftp|http):\/\//
        n = file.split (/\//)[-1]
        if (cp_local n) != 0
          Dir.chdir "#{$hTAG['NAME']}/SOURCES"
          exec_command "#{$FTP_CMD} #{file}"
          if $? != 0
            # file retrieve error
	    status = get_from_mirror n
          end
          Dir.chdir "../.."
        end
      else
        if (cp_local file) != 0
          Dir.chdir "#{$hTAG['NAME']}/SOURCES"
	  status = get_from_mirror file
          Dir.chdir "../.."
        end
      end
    end
    return status
  end
  
=begin -------------------------------------------------------
  strip_spec:  引数 -- spec の*文字列*
    %define 行を切り出し spec 中のマクロを置き換える
    Name TAG や Version TAG など他の TAG で使用される可能性
    のある物は置き換えて、Hash $hTAG を生成する。その際に、
    TAG名 はすべて大文字として格納する。
=end   -------------------------------------------------------
  def pre_process_strip spec, macro
    s = ""
    _add = 1
    spec.each_line do |line|
      if line =~ /^%if(\S*)\s+(.+)/
        cond = $1
        value = $2
      	while value =~ /%/
      	  if value =~ /%(\w+)/
      	    m = $1
      	    if macro.assoc(m) != nil
      	      value.gsub! /%#{m}/, macro.assoc(m)[1]
	    else
	      macro += [["#{m}", ""]]
      	    end
      	  elsif value =~ /%\{(\w+)\}/
      	    m = $1
      	    if macro.assoc(m) != nil
      	      value.gsub! /%\{#{m}\}/, macro.assoc(m)[1]
	    else
	      macro += [["#{m}", ""]]
      	    end
      	  end
      	end
        case cond
        when "arch"
          if value !~ /#{$ARCH}/
            _add = 0
          end
        when "narch"
          if value =~ /#{$ARCH}/
            _add = 0
          end
        when "os"
          if value !~ /#{$OS}/
            _add = 0
          end
        else
          if cond == ""
      	    while value =~ /%/
      	      if value =~ /%(\w+)/
      	        m = $1
      	        if macro.assoc(m) != nil
      	          value.gsub! /%#{m}/, macro.assoc(m)[1]
	        else
	          macro += [["#{m}", ""]]
      	        end
      	      elsif value =~ /%\{(\w+)\}/
      	        m = $1
      	        if macro.assoc(m) != nil
      	          value.gsub! /%\{#{m}\}/, macro.assoc(m)[1]
	        else
	          macro += [["#{m}", ""]]
      	        end
      	      end
      	    end
            if value =~ /0/ && value !~ /\!/
              _add = 0
            end
          end
        end
      elsif (line =~ /%\{\?(.+?):\s*(.+)\}\s*$/)
        m = $1.strip
        l = $2.strip
        if (m !~ /^\!/ && macro.assoc(m) != nil) ||
	   (m =~ /^\!/ && macro.assoc(m) == nil)
          s += "#{l}\n"
        end
      else
        if (line =~ /%endif/ || line =~ /%else/) && _add == 0
          _add = 1
        elsif _add != 0
          s += line
        end
      end
    end
    return s
  end

  def strip_spec spec
    macro = spec.scan /^%define\s+(\S+)\s+(\S+)\s*$/
    f = open "/usr/lib/rpm/macros"
    m = f.read
    f.close
    tmp = m.scan /^%(\S+)\s+(.+)\s*$/
    tmp.reject! do |define, value|
      define =~ /__/ || value =~ /\\/
    end
    macro += tmp
    if macro.assoc("_ipv6") == nil
      macro += [["_ipv6", "0"]]
    end
    if macro.assoc("ix86") == nil
      macro += [["ix86", "i386 i486 i586 i686 i786 i886 i986"]]
    end
    if macro.assoc("alpha") == nil
      macro += [["alpha", "alpha alphaev5 alphaev56 alphapca56 alphaev6 alphaev67"]]
    end
    spec = pre_process_strip spec, macro
    name = spec.scan(/^name\s*:\s*(\S+)\s*$/i)[0][0]
    version = spec.scan(/^version\s*:\s*(\S+)\s*$/i)[0][0]
    release = spec.scan(/^release\s*:\s*(\S+)\s*$/i)[0][0]
    macro += [["name", name]] + [["PACKAGE_NAME", name]]
    macro += [["version", version]] + [["PACKAGE_VERSION", version]]
    macro += [["release", release]] + [["PACKAGE_RELEASE", release]]

    $hTAG.clear
    tag = spec.scan /^(\w+?)\s*:(.*)$/
    tag.each do |key, value|
      key.strip!
      key.upcase!
      value.strip!
      while value =~ /%/
      	if value =~ /%(\w+)/
      	  m = $1
          if macro.assoc(m) != nil
      	    value.gsub! /%#{m}/, macro.assoc(m)[1]
          else
	    macro += [["#{m}", ""]]
          end
      	elsif value =~ /%\{(\w+)\}/
      	  m = $1
          if macro.assoc(m) != nil
      	    value.gsub! /%\{#{m}\}/, macro.assoc(m)[1]
          else
	    macro += [["#{m}", ""]]
          end
      	end
      end
      if $hTAG.key? (key)
        $hTAG[key] = "#{$hTAG[key]}, #{value}"
      else
        $hTAG[key] = value
      end
    end
  end

=begin -------------------------------------------------------
  prepare_dirs: 引数 -- 作成するディレクトリ
    引数で指定されたディレクトリを作成する
=end ---------------------------------------------------------
  def prepare_dirs (directories)
    Dir.chdir $hTAG["NAME"]
    directories.each do |d|
      if d =~ /\//
        i = 0
        d.split("/").each do |cd|
          if ! test (?d, cd)
            Dir.mkdir cd, 0755
          end
          Dir.chdir cd
          i += 1
        end
        while i != 0
          Dir.chdir ".."
          i -= 1
        end
      else
        if ! test (?d, d)
          Dir.mkdir d, 0755
        end
      end
    end
    Dir.chdir ".."
  end

=begin -------------------------------------------------------
  cp_to_tree:
    Sourece/Patch/Icon タグで指定されているファイルをビルド
    ツリーにコピーする。すでに存在する際には co されている
    物と比較し違う物の場合はコピーする
=end ---------------------------------------------------------
  def cp_to_tree
    Dir.chdir $hTAG['NAME']
    $hTAG.each do |t, v|
      if t =~ /^(SOURCE|PATCH|ICON)\d*/
        v = v.split (/\//)[-1] if v =~ /\//
        if ! test (?e, "SOURCES/#{v}")
  	  exec_command "cp -pfv #{v} SOURCES"
        else
          if test (?e, "#{v}")
            md5SRC = `md5sum #{v}`.split[0]
            md5DEST = `md5sum SOURCES/#{v}`.split[0]
            if md5SRC != md5DEST
              exec_command "cp -pfv #{v} SOURCES"
            end
          end
        end
      end
    end
    Dir.chdir ".."
  end

  def prepare_outputdirs
    topdir = get_topdir ".."
    ["SOURCES", "SRPMS", "#{$ARCH}", "noarch"].each do |subdir|
      if ! test (?d, "#{topdir}/#{subdir}")
        exec_command "mkdir -p #{topdir}/#{subdir}"
      end
    end
  end

  def backup_nosources
    topdir = get_topdir ".."
    if ($hTAG["NOSOURCE"] != nil && $SRPM_ONLY == 0)
      $hTAG["NOSOURCE"].split(/[\s,]/).each do |n|
    	if n != ""
	  if n == "0" && ! $hTAG.key?("SOURCE0")
    	    s = $hTAG["SOURCE"]
	  else
    	    s = $hTAG["SOURCE#{n}"]
	  end
	  if s =~ /^(ftp|http):\/\//
    	    s = s.split (/\//)[-1]
	  end
    	  exec_command "cp -pfv SOURCES/#{s} #{topdir}/SOURCES"
    	  File.chmod 0664, "#{topdir}/SOURCES/#{s}"
    	end
      end
    end
    if ($hTAG.key?("NOPATCH") && $SRPM_ONLY == 0)
      $hTAG["NOPATCH"].split(/[\s,]/).each do |n|
    	if n != ""
	  if n == "0" && ! $hTAG.key?("PATCH0")
    	    s = $hTAG["PATCH"]
	  else
    	    s = $hTAG["PATCH#{n}"]
	  end
	  if s =~ /^(ftp|http):\/\//
    	    s = s.split (/\//)[-1]
	  end
    	  exec_command "cp -pfv SOURCES/#{s} #{topdir}/SOURCES"
    	  File.chmod 0664, "#{topdir}/SOURCES/#{s}"
    	end
      end
    end
  end
  
  def backup_rpms (install)
    topdir = get_topdir ".."
    if $RPMOPT =~ /\-ba|\-bs/
      Dir.glob ("SRPMS/*.rpm").each do |srpm|
        pkg = srpm.split("/")[-1].split("-")[0..-3].join ("-")
	Dir.glob ("#{topdir}/SRPMS/#{pkg}-*src.rpm") do |s|
	  if pkg == s.split("/")[-1].split("-")[0..-3].join ("-")
	    File.delete s
	  end
	end
        exec_command "cp -pfv #{srpm} #{topdir}/SRPMS"
        File.chmod 0664, "#{topdir}/SRPMS/#{srpm.split('/')[-1]}"
      end
    end
    if $RPMOPT =~ /\-ba|\-bb/
      Dir.glob ("RPMS/#{$ARCH}/*.rpm").each do |rpm|
        pkg = rpm.split("/")[-1].split("-")[0..-3].join ("-")
	Dir.glob ("#{topdir}/#{$ARCH}/#{pkg}-*.#{$ARCH}.rpm") do |r|
	  if pkg == r.split("/")[-1].split("-")[0..-3].join ("-")
  	    File.delete r
	  end
	end
        exec_command "cp -pfv #{rpm} #{topdir}/#{$ARCH}"
        File.chmod 0664, "#{topdir}/#{$ARCH}/#{rpm.split('/')[-1]}"
	if install == 1
          exec_command "sudo rpm -Uvh --nodeps --force #{rpm}"
	elsif $DEPEND_PACKAGE != "" && pkg =~ /#{$DEPEND_PACKAGE}/
          exec_command "sudo rpm -Uvh --nodeps --force #{rpm}"
	end
      end
      Dir.glob ("RPMS/noarch/*.rpm").each do |rpm|
        pkg = rpm.split("/")[-1].split("-")[0..-3].join ("-")
	Dir.glob ("#{topdir}/noarch/#{pkg}-*.noarch.rpm") do |r|
	  if pkg == r.split("/")[-1].split("-")[0..-3].join ("-")
	    File.delete r
	  end
	end
        exec_command "cp -pfv #{rpm} #{topdir}/noarch"
        File.chmod 0664, "#{topdir}/noarch/#{rpm.split('/')[-1]}"
	if $DEPEND_PACKAGE != "" && pkg =~ /#{$DEPEND_PACKAGE}/
          exec_command "sudo rpm -Uvh --nodeps --force #{rpm}"
	end
      end
    end
  end

  def clean_up (pkg, install)
    prepare_outputdirs
    backup_nosources
    backup_rpms(install)
    exec_command "rpm --rmsource --rcfile rpmrc #{pkg}.spec"
    File.delete "rpmrc"
    File.delete "rpmmacros"
    if $DEBUG_FLAG == 1
      exec_command "rm -rf SOURCES RPMS SRPMS"
    else
      exec_command "rm -rf SOURCES BUILD RPMS SRPMS"
    end
  end
  
  def do_rpm (pkg)
    STDOUT.flush
    Dir.chdir pkg
    install = 0
    path = Dir.pwd
#    if ! test (?e, "rpmrc")
      if $DEBUG_FLAG == 1
	`grep -v macrofiles ../rpmrc.debug > rpmrc`
      else
	`grep -v macrofiles ../rpmrc > rpmrc`
      end
      macrofiles = `grep macrofiles ../rpmrc`.chop
      `echo #{macrofiles}#{path}/rpmmacros >> rpmrc`
#    end
#    if ! test (?e, "rpmmacros")
      f = open ("rpmmacros", "w")
      f.print <<EOF
%_topdir #{path}
%_arch #{$ARCH}

%__libtoolize		libtoolize
%__aclocal \\
    if grep "AUTOMAKE_OPTIONS" Makefile.am >/dev/null; then \\
      version=`grep "AUTOMAKE_OPTIONS" Makefile.am | cut "-d " -f 3` \\
      major=`echo ${version} | cut -d. -f 1` \\
      minor=`echo ${version} | cut -d. -f 2` \\
      if [ ${major} -eq 1 -a ${minor} -ge 5 ]; then \\
aclocal  ${ACLOCAL_FLAGS}; export ACLOCAL=aclocal;\\
      else \\
aclocal-old  ${ACLOCAL_FLAGS}; export ACLOCAL=aclocal-old; \\
      fi \\
    else \\
aclocal-old  ${ACLOCAL_FLAGS}; export ACLOCAL=aclocal-old; \\
    fi

%__automake \\
    if grep "AUTOMAKE_OPTIONS" Makefile.am >/dev/null; then \\
      version=`grep "AUTOMAKE_OPTIONS" Makefile.am | cut -d\" \" -f 3` \\
      major=`echo ${version} | cut -d. -f 1` \\
      minor=`echo ${version} | cut -d. -f 2` \\
      if [ ${major} -eq 1 -a ${minor} -ge 5 ]; then \\
automake  --add-missing --gnu ${am_opt}; export AUTOMAKE=automake;\\
      else \\
automake-old  --add-missing --gnu ${am_opt}; export AUTOMAKE=automake-old;\\
      fi \\
    else \\
automake-old  --add-missing --gnu ${am_opt}; export AUTOMAKE=automake-old;\\
    fi

%__autoconf \\
    if grep "AC_PREREQ" configure.in >/dev/null; then \\
      version=`grep "AC_PREREQ" configure.in | sed s/AC_PREREQ// | sed s/"("// | sed s/")"//` \\
      major=`echo ${version} | cut -d. -f 1` \\
      minor=`echo ${version} | cut -d. -f 2` \\
      if [ ${major} -eq 2 -a ${minor} -ge 52 ]; then \\
autoconf ; export AUTOCONF=autoconf;\\
      else \\
autoconf-old ; export AUTOCONF=autoconf-old; \\
      fi \\
    else \\
autoconf-old ; export AUTOCONF=autoconf-old; \\
    fi

%__autoheader \\
    if grep "AC_PREREQ" configure.in >/dev/null; then \\
      version=`grep "AC_PREREQ" configure.in | sed s/AC_PREREQ// | sed s/"("// | sed s/")"//` \\
      major=`echo ${version} | cut -d. -f 1` \\
      minor=`echo ${version} | cut -d. -f 2` \\
      if [ ${major} -eq 2 -a ${minor} -ge 52 ]; then \\
autoheader ; export AUTOHEADER=autoheader;\\
      else \\
autoheader-old ; export AUTOHEADER=autoheader-old; \\
      fi \\
    else \\
autoheader-old ; export AUTOHEADER=autoheader-old; \\
    fi

%configure \\
  CFLAGS="${CFLAGS:-%optflags}" ; export CFLAGS; \\
  LDFLAGS="${LDFLAGS:-%{-s:-s}}"  ; export LDFLAGS; \\
  if grep "^AM_*_GETTEXT" configure.in >/dev/null; then \\
    if grep "sed.*POTFILES" configure.in >/dev/null; then \\
      : do nothing -- we still have an old unmodified configure.in \\
    else \\
      test -r aclocal.m4 || touch aclocal.m4; \\
      echo "no" | gettextize --force --copy; \\
      test -r aclocal.m4 && %{__chmod} u+w aclocal.m4; \\
    fi \\
  fi \\
  if grep "^.*_PROG_LIBTOOL" configure.in >/dev/null; then \\
    %{?__libtoolize:[ -f configure.in ] && %{__libtoolize} --copy --force ;} \\
  fi \\
  %{?__aclocal:%{__aclocal};} \\
  if grep "^AM_CONFIG_HEADER" configure.in >/dev/null; then \\
    %{?__autoheader:%{__autoheader};} \\
  fi \\
  if grep "^AM_INIT_AUTOMAKE" configure.in >/dev/null; then \\
    echo "Running automake --gnu ${am_opt} ..."; \\
    %{?__automake:%{__automake};} \\
  fi \\
  %{?__autoconf: %{__autoconf};} \\
  ./configure \\\\\\
	%{?_gnu: --host=%{_host} --target=%{_target_platform}} \\\\\\
	%{!?_gnu: %{_target_platform}} \\\\\\
  	--prefix=%{_prefix} \\\\\\
	--exec-prefix=%{_exec_prefix} \\\\\\
	--bindir=%{_bindir} \\\\\\
	--sbindir=%{_sbindir} \\\\\\
	--sysconfdir=%{_sysconfdir} \\\\\\
	--datadir=%{_datadir} \\\\\\
	--includedir=%{_includedir} \\\\\\
	--libdir=%{_libdir} \\\\\\
	--libexecdir=%{_libexecdir} \\\\\\
	--localstatedir=%{_localstatedir} \\\\\\
	--sharedstatedir=%{_sharedstatedir} \\\\\\
	--mandir=%{_mandir} \\\\\\
	--infodir=%{_infodir}

EOF
      f.close
      if $DEBUG_FLAG == 1
	`echo '%__os_install_post    \' >> rpmmacros`
	`echo '    /usr/lib/rpm/brp-compress \' >> rpmmacros`
	`echo '    /usr/lib/rpm/modify-init.d \' >> rpmmacros`
	`echo '%{nil}' >> rpmmacros`
      end
#    end
    ENV['OMOI_KONDARA_DEBUG'] = "#{$DEBUG_FLAG}"
    if test (?e, "REMOVE.PLEASE")
# .spec をパースしてすべてのサブパッケージを消すべき。
# すべての .spec の依存関係がただしければ、依存するものも
# 全消去するべき。
      exec_command "sudo rpm -e --nodeps #{pkg}"
      install=1
    end
    if test (?e, "DISPLAY.PLEASE")
      ENV["DISPLAY"]=$DISPLAY
    end
    if test (?e, "SU.PLEASE")
      exec_command "sudo rpm --rcfile rpmrc #{$RPMOPT} #{pkg}.spec"
    else
      exec_command "rpm --rcfile rpmrc #{$RPMOPT} #{pkg}.spec"
    end
    if test (?e, "DISPLAY.PLEASE")
      ENV.delete("DISPLAY")
    end
    rpmerr = $?
    if rpmerr != 0 && $FORCE == 0
    else
      if $RPMOPT =~ /\-ba|\-bb|\-bs/
        clean_up (pkg,install)
      end
    end
    Dir.chdir ".."
    return rpmerr   
  end
  
  def parse_conf
    $CONF_FILES.each do |conf|
      conf = File.expand_path conf
      if test (?e, conf)
        open (conf) do |f|
          while f.gets
	    if /^#.*$/ or /^$/
	      next
	    end
            s = split
            v = s.shift
	    v.upcase!
            case v
            when "TOPDIR"
              $TOPDIR = s.shift
            when "MIRROR"
              while v = s.shift
                $MIRROR += [v]
              end
	    when "FTP_CMD"
	      $FTP_CMD = s.join " "
            when "DISPLAY"
	      $DISPLAY = s.join " "
            end
          end
        end
        return
      end
    end
  end

  def get_cvs_source pkg
    f = open "#{$hTAG['NAME']}/CVS/Root"
    repo = f.gets.chop
    f.close
    f = open "#{$hTAG['NAME']}/CVS/Repository"
    pkgsroot = f.gets.chop.split ("/")[0..-2].join ("/")
    f.close
    pwd = Dir.pwd
    pkgsroot.split ("/").each do |dummy|
      Dir.chdir ".."
    end
    exec_command "cvs -d #{repo} -z3 co #{pkgsroot}/#{pkg}"
    Dir.chdir pwd
  end

  def build_and_install (pkg, rpmflg)
    if pkg == "" || pkg =~ /kernel\-/
      return
    end

    unless test (?d, pkg)
      `grep -i ^provides */*.spec | grep #{pkg}`.each_line do |l|
        prov = l.split(/\//)[0]
        if (test (?e, "#{prov}/#{prov}.spec") &&
	   Dir.glob ("#{prov}/TO.*") == [] &&
	   Dir.glob ("#{prov}/OBSOLETE") == [])
          pkg = prov
          break
        end
      end
    end

    if $NONFREE == 0 && test (?e, "#{pkg}/TO.Nonfree")
      return
    end
    _t = $hTAG.dup
    _l = $LOG_PATH
    if $CVS != 0
      get_cvs_source pkg
    end
    if $VERBOSE == 0
      putc "\r"
    end
    buildme (pkg)
    topdir = get_topdir
    $LOG_PATH = _l
    $hTAG = _t

    pkgs = Dir.glob ("#{topdir}/#{$ARCH}/#{pkg}-*.rpm")
    if pkgs != []
      exec_command "sudo rpm #{rpmflg} --force --nodeps #{pkgs.join ' '}"
    end
    pkgs = Dir.glob ("#{topdir}/noarch/#{pkg}-*.rpm")
    if pkgs != []
      exec_command "sudo rpm #{rpmflg} --force --nodeps #{pkgs.join ' '}"
    end

    if $VERBOSE == 0
      print "#{$hTAG['NAME']} "
      print "-" * (29 - $hTAG['NAME'].length), "> "
    end
  end

=begin -------------------------------------------------------
  chk_requires:
    TAG BuildPreReq, BuildRequires 行に記述されているパッ
    ケージがあればそのパッケージがインストールされている
    かどうか判断し、必要ならばインストールする。
    rpm -ivh する関係上、sudo が password 無しで実行可能
    である事。
=end   -------------------------------------------------------
  def chk_requires
    req = Array.new
    if $hTAG.key?("BUILDPREREQ")
      req = $hTAG["BUILDPREREQ"].split /[\s,]/
    end
    if $hTAG.key?("BUILDREQUIRES")
      $hTAG["BUILDREQUIRES"].split(/[\s,]/).each do |r|
        req += [r]
      end
    end

    if req == nil
      return
    end

    req.delete ""
    while r = req.shift
      if r != "" && r =~ /\//
        # 直接ファイル名が指定されている
        # パッケージ名を指定すべし
        next
      end

      # インストール済の場合 ir = [ver, rel]
      ir = `rpm -q #{r} 2> /dev/null`.chop.split(/\-/)[-2..-1]
      if r =~ /\-devel/
        r = r.split (/\-/)[0..-2].join ("-")
      end
      if $? != 0
        build_and_install r, "-Uvh"

        # バージョン情報をスキップする
        r = req.shift
        if r =~ /[<>=]/
          r = req.shift
        else
          req.unshift r
        end
        next
      else
        pkg = r
        r = req.shift
        if r =~ /[<>=]/
          nr = req.shift.split /\-/
          ver = `#{$RPMVERCMP} #{ir[0]} #{nr[0]}`.chop
          if nr.length > 1
            rel = `#{$RPMVERCMP} #{ir[1]} #{nr[1]}`.chop
          end
      
          case r
          when ">"
            if ver == ">"
              next
            elsif ver == "="
              if nr.length > 1 && rel == ">"
        	next
              else
                build_and_install pkg, "-Uvh"
              end
            else
              build_and_install pkg, "-Uvh"
            end
          when "="
            if ver == "="
	      if nr.length < 2
		next
              elsif rel == "="
                next
              else
                build_and_install pkg, "-Uvh"
              end
            else
              build_and_install pkg, "-Uvh"
            end
          when ">="
            if ver == "<" || (ver == "=" && nr.length > 1 && rel == "<")
              build_and_install pkg, "-Uvh"
            else
              next
            end
          end
        else
          req.unshift r
        end
      end
    end
  end

  def check_group
    $hTAG['GROUP'].split(/,\s*/).each do |g|
      if GROUPS.rindex(g) == nil
        if $SCRIPT == 0
          print "\n#{RED}!! No such group (#{g}) !!\n"
          print "!! Please see /usr/share/doc/rpm-x.x.x/GROUP !!#{NOCOLOR}\n"
	else
          print "\n!! No such group (#{g}) !!\n"
          print "!! Please see /usr/share/doc/rpm-x.x.x/GROUP !!\n"
	end
      end
    end
  end

  def buildme (pkg)
    if Dir.glob ("#{pkg}/SRPM.ONLY").length != 0
      $SRPM_ONLY = 1
      $RPMOPT = "-bs"
    else
      $SRPM_ONLY = 0
      $RPMOPT = $DEF_RPMOPT
    end
    if $ARCH =~ /alpha/ && $RPMOPT =~ /\-ba|\-bb/
      $RPMOPT += " --target=#{$ARCH}"
    end
    
    if $VERBOSE == 0
      print "#{pkg} "
      print "-" * (29 - pkg.length), "> "
      STDOUT.flush
    end
    ret = catch (:exit_buildme) do
      if $ARCH =~ /alpha/
        notfile = "#{pkg}/NOT.alpha"
      elsif $ARCH =~ /i.86/
	notfile = "#{pkg}/NOT.i586"
      else
        notfile = "#{pkg}/NOT.#{$ARCH}"
      end
      if Dir.glob (notfile).length != 0
    	throw :exit_buildme, 1
      end
      if Dir.glob ("#{pkg}/OBSOLETE").length != 0
    	throw :exit_buildme, 3
      end
      if Dir.glob ("#{pkg}/TO.*").length != 0 && $MAIN_ONLY == 1
    	throw :exit_buildme, 1
      end
      if $NONFREE == 0 && test (?e, "#{pkg}/TO.Nonfree")
    	throw :exit_buildme, 1
      end
      if test (?d, pkg)
    	if test (?e, "#{pkg}/#{pkg}.spec")
          if test (?e, "#{pkg}/#{$LOG_FILE}")
            File.delete "#{pkg}/#{$LOG_FILE}"
          end
    	  f = open ("#{pkg}/#{pkg}.spec")
    	  s = f.read
    	  f.close
	  strip_spec s
	  check_group
          if $GROUPCHECK == 1
    	    throw :exit_buildme, 1
          end
          if $ARCH_DEP_PKGS_ONLY == 1 && ($hTAG['BUILDARCHITECTURES'] == "noarch" || $hTAG['BUILDARCH'] == "noarch")
    	    throw :exit_buildme, 1
          end
          $LOG_PATH = "#{Dir.pwd}/#{$hTAG['NAME']}"

          if $SRPM_ONLY == 0
	    chk_requires
	  end

          topdir = get_topdir
	  if Dir.glob ("#{topdir}/SRPMS/#{pkg}-*.rpm").length != 0
	    match_srpm = ""
	    Dir.glob ("#{topdir}/SRPMS/#{pkg}-*.rpm").each do |srpms|
    	      pn = srpms.split("/")[-1].split("-")[0..-3].join ("-")
	      if pn == pkg
	        match_srpm = srpms
	        break
	      end
	    end
	    if $FORCE == 0 && match_srpm != ""
	      if File.mtime("#{pkg}/#{pkg}.spec") <= File.mtime(match_srpm)
    	        throw :exit_buildme, 1
	      end
	    end
	  end

	  prepare_dirs (["SOURCES", "BUILD", "RPMS/#{$ARCH}", "RPMS/noarch", "SRPMS"])
    	  if (get_no "SOURCE") != 0
            throw :exit_buildme, 2
	  end
    	  if (get_no "PATCH") != 0
            throw :exit_buildme, 2
	  end
    	  cp_to_tree
    	  throw :exit_buildme, do_rpm (pkg)
    	else
    	  throw :exit_buildme, 1
    	end
      end
    end
    if $VERBOSE == 0
      case ret
      when 0
        if $SCRIPT == 0
	  print GREEN
	end
    	print "#{SUCCESS}"
        if $SCRIPT == 0
	  print NOCOLOR
	end
	print "\n"
      when 1
        if $SCRIPT == 0
	  print YELLOW
	end
    	print "#{SKIP}"
        if $SCRIPT == 0
	  print NOCOLOR
	end
	print "\n"
      when 3
        if $SCRIPT == 0
	  print BLUE 
	end
    	print "#{OBSOLETE}"
        if $SCRIPT == 0
	  print NOCOLOR
	end
	print "\n"
      else
        if $SCRIPT == 0
	  print RED
	end
    	print "#{FAILURE}"
        if $SCRIPT == 0
	  print NOCOLOR
	end
	print "\n"
      end
    end
  end

  def recursive_build (path)
    pwd = Dir.pwd
    Dir.chdir path
    for pn in `ls ./`
      pn.chop!
      if test (?d, pn) && pn != "BUILD"
        if pn != "CVS" && pn != "." && pn != ".." && test (?e, "#{pn}/#{pn}.spec")
          recursive_build pn
	end
      else
        if pn =~ /^.+\.spec$/ && test (?e, "CVS/Repository")
	  pkg = Dir.pwd.split ("/")[-1]
	  Dir.chdir ".."
	  buildme (pkg)
	  Dir.chdir pkg
	end
      end
    end
    Dir.chdir pwd
  end

############ Main ############
ENV['PATH'] = "../tools:#{ENV['PATH']}"
opt = GetoptLong.new (
  ["-a", "--archdep", GetoptLong::NO_ARGUMENT],
  ["-c", "--cvs", GetoptLong::NO_ARGUMENT],
  ["-d", "--depend", GetoptLong::REQUIRED_ARGUMENT],
  ["-f", "--force", GetoptLong::NO_ARGUMENT],
  ["-g", "--checkgroup", GetoptLong::NO_ARGUMENT],
  ["-m", "--main", GetoptLong::NO_ARGUMENT],
  ["-n", "--nonfree", GetoptLong::NO_ARGUMENT],
  ["-r", "--rpmopt", GetoptLong::REQUIRED_ARGUMENT],
  ["-s", "--script", GetoptLong::NO_ARGUMENT],
  ["-v", "--verbose", GetoptLong::NO_ARGUMENT],
  ["-G", "--debug", GetoptLong::NO_ARGUMENT]
)

begin
  opt.each do |on, ov|
    case on
    when "-a"
      $ARCH_DEP_PKGS_ONLY = 1
    when "-c"
      $CVS = 1
    when "-d"
      $DEPEND_PACKAGE = ov
    when "-f"
      $FORCE = 1
    when "-g"
      $GROUPCHECK = 1
    when "-m"
      $MAIN_ONLY = 1
    when "-n"
      $NONFREE = 1
    when "-r"
      if ov != nil
        $DEF_RPMOPT = ov
      end
    when "-s"
      $SCRIPT = 1
    when "-v"
      $VERBOSE = 1
    when "-G"
      $DEBUG_FLAG = 1
    end
  end
rescue
  exit 1
end 

parse_conf

if `which #{$RPMVERCMP}` == ""
  print "Please install #{$RPMVERCMP}\n"
  exit 0
end

if `which #{$FTP_CMD.split[0]}` == ""
  print "Please install #{$FTP_CMD}\n"
  exit 0
end

if ARGV.length == 0
  if $DEPEND_PACKAGE == ""
    recursive_build "./"
  else
    $FORCE = 1
    dep = `env LANG=C sudo rpm -e --test #{$DEPEND_PACKAGE} 2>&1`
    pkgs = dep.scan (/^.*needed by (.*)$/).flatten.sort.uniq.compact
    sp = Array.new
    pkgs.each do |pkg|
      if pkg !~ /^$/
        sp += [`rpm -q --queryformat "%{SOURCERPM}" #{pkg}`.split(/\-/)[0..-3].join('-')]
      end
    end
    buildme $DEPEND_PACKAGE
    spkgs = sp.sort.uniq
    spkgs.each do |pkg|
      buildme pkg
    end
  end
else
  ARGV.each do |av|
    if av =~ /^.+\/$/
      av.chop!
    end
    buildme (av)
  end
end
