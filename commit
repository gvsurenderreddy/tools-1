#!/usr/bin/env ruby

$TOOLDIR = File.dirname($0)
$:.unshift($TOOLDIR)

require 'environment'
require 'rpm'
require 'svn/client'

UNVERSIONED = 2
DELETED = 6
problem_found = false

## check arguments
if ARGV.length == 0
  STDERR.puts("Error: please specify package names")
  STDERR.puts("% #{$0} pkg1 pkg2 ...")
  exit 1
end

## check whether $PKGDIR is symlink or not
path = File.expand_path($PKGDIR)
if FileTest.symlink?(path)
  path = File.readlink(path)
end

## this script must be executed in pkgs/ directory
if path != File.expand_path(Dir.getwd)
  STDERR.puts("Error: please run #{$0} in pkgs/ directory")
  exit 1
end

## lint specfile
ARGV.each { |pkg|
  pkg = pkg.chop if pkg =~ /\/+$/
  system("#{$TOOLDIR}/speclint #{pkg}")
  if $? != 0
    STDERR.puts("Error: #{pkg}/#{pkg}.spec has some lint errors")
    problem_found = true
    next
  end
}
exit 1 if problem_found

## find files to add
ARGV.each { |pkg|
  pkg = pkg.chop if pkg =~ /\/+$/
  RPM.readrc('/usr/lib/rpm/rpmrc')
  RPM.verbosity = RPM::LOG_ERR

  spec = RPM::Spec.open("#{pkg}/#{pkg}.spec")
  if spec.nil?
    STDERR.puts
    STDERR.puts("Error: #{pkg}/#{pkg}.spec has some parse errors")
    problem_found = true
    next
  end

  sources = spec.sources.collect{ |s| File.basename( s.to_s ) unless s.no? }.compact
  sources << "#{pkg}.spec"

  irregular = []
  svnctx = Svn::Client::Context.new
  svnctx.st("#{Dir.getwd}/#{pkg}", nil, true, true) { |path, status|
    irregular << File.basename(path) if status.text_status == UNVERSIONED
    irregular << File.basename(path) if status.text_status == DELETED
  }

  missing = sources & irregular
  if missing.size > 0
    STDERR.puts('Error: unversioned/missing/deleted files found')
    STDERR.puts('Please add following files')
    STDERR.print("% svn add")
    missing.each{ |i| STDERR.print(" #{pkg}/#{i}") }
    STDERR.puts
    problem_found = true
  end

  # check sources file (sorry, confusing variable names)
  nosrcs = spec.sources.collect { |s| File.basename(s.to_s) if s.no? }.compact
  unless nosrcs.empty?
    if File.exist?("#{pkg}/sources")
      if irregular.include?('sources')
        STDERR.puts("Error: #{pkg}/sources is not under version control")
        STDERR.puts("Please add #{pkg}/sources file")
        STDERR.puts("% svn add #{pkg}/sources")
        problem_found = true
      end
      s = Array.new
      open("#{pkg}/sources") { |f|
        while l = f.gets
          if /^[0-9abcdef]+\s+([^\s]+)/ =~ l
            s << File.basename($1)
          end
        end
      }
      missing = nosrcs.collect { |n| n unless s.include?(n) }.compact
      unless missing.empty?
        STDERR.puts("Error: #{pkg}/sources has no proper sha256sum")
        STDERR.puts('Please add sha256sum of following files')
        missing.each { |m| STDERR.puts "#{pkg}/#{m}" }
        problem_found = true
      end
    else
      if irregular.include?('sources')
        STDERR.puts("Error: #{pkg}/sources does not exits")
        STDERR.puts("Please create and add #{pkg}/sources file")
        STDERR.puts("% svn add #{pkg}/sources")
      else
        STDERR.puts("Error: #{pkg}/sources does not exits, but it's under version control")
        STDERR.puts("#{pkg}/sources file is deleted or missing")
        STDERR.puts("% svn revert #{pkg}/sources")
      end
      problem_found = true
    end
  end
}
exit 1 if problem_found

## collect information of specs
pkgs = []
ARGV.each { |pkg|
  pkg = pkg.chop if pkg =~ /\/+$/
  logs = []
  context = :out_of_changelog
  open(File.join(pkg, "#{pkg}.spec")).each { |l|
    case context
    when :out_of_changelog
      context = :changelog_begin if /^%changelog/i =~ l
    when :changelog_begin
      if /^\*/ =~ l
	context = :entry_begin
	logs << l
      end
    when :entry_begin
      if /^[%*]/ =~ l
	break # breaks 'open.each', not 'case'
      else
	logs << l
      end
    end
  }
  pkgs << [pkg, logs]
}

## commit and update
## pkgs[i][0]: name of package, pkgs[i][1]: array of each log line
svnlog = ''
pkgnames = []
pkgs.each { |pkg|
  pkgnames << pkg[0]
  svnlog += "== #{pkg[0]} ==\n#{pkg[1].join}\n"
}
pid = Process.fork {
  exec "/usr/bin/svn", 'commit', '-m', svnlog, *pkgnames
}
Process.waitpid2(pid)
pkgnames.each { |pkg|
  system("(cd ./#{pkg}; /usr/bin/svn up)")
}
puts svnlog
