# lib/prepare.rb
#
# by Hiromasa YOSHIMOTO <y@momonga-linux.org>

require 'lib/common.rb'

class Job 

  # [RPM46] rpmbuild に渡す --macros オプションを生成する。
  # rpmbuild に --macros オプションを渡すと、それの引数で
  # rpm-4.6.0-rc3/lib/rpmrc.c の macrofiles が上書きされる。
  # 文字列に含まれる %{_target} などのマクロや * と ~ はちゃんと展開される。
  # ただし、マクロは上記の rpmrc.c で定義されているものに限られると思う。
  private
  def generate_macrofiles(path)
    '--macros=' \
    '/usr/lib/rpm/macros:' \
    '/usr/lib/rpm/macros.momonga:' \
    '/usr/lib/rpm/platform/%{_target}/macros:' \
    '/usr/lib/rpm/momonga/macros:' \
    '/etc/rpm/macros.*:' \
    '/etc/rpm/macros:' \
    '/etc/rpm/%{_target}/macros:' \
    '~/.rpmmacros:' \
    "#{path}/rpmmacros "
  end

  # rpmrcファイルの雛型 basefile を元に
  # 新しいrpmrcファイルを作成し、 newfile として保存する
  #
  # 第三引数で設定ファイル(OPTFLAGS)が指定された場合は
  # 設定ファイルの内容に従って newfile中のoptflags: 行を置換する
  #
  # 設定ファイル(OPTFLAGS)の書式は以下の通り
  # - 置換ルール("pattern" と "replacement" の対)を一行づつ記述
  # - 複数の置換ルールを記述した場合は、先頭から順番に置換処理を行う  
  # - 先頭文字が"#"で始まる行(コメント行)、及び空行は無視する
  #
  # 設定ファイルの記述例は以下の通り
  # 置換する場合)
  #    -O3 -O2
  #    -O3 "-O2 -ftree-vectorize"
  # 削除する場合)
  #     -O3 ""
  #     "-mtune=[^ ]*"   ""
  # 追加する場合)
  #     $    " -Wall"
  #     ^    "-Wall"

  def copy_rpmrc(basefile, newfile, optfile = nil)
    pats = []
    if !optfile.nil?
      File.open(optfile).each { |line|
        line.chomp!
        
        token = line.scan(/\"[^\"]*\"|[^\" \t]+/)
        
        next if 0 == token.size
        next if "#" == token[0]
        
        if 2 != token.size
          abort "format error in #{optfile}, line #{line}"
          throw :exit_buildme, MOMO_FAILURE
          next
        end    
        
        token.each {|s|
          s.gsub!(/^\"(.*)\"$/, "\\1")
        }   
        
        pats.push(token)
      }
    end

    newf = File.open(newfile, 'w')
    File.open(basefile, 'r').each { |line|
      # macrofiles: 〜 の行は削除する
      next if line[0,10] == "macrofiles"
      
      # 設定ファイル OPTFLAGS の内容に従って、 optflags: 〜の行を編集
      if pats.size and line[0,9] == "optflags:"
        col = line.split(' ')
        str = col[2..-1].join(' ')
        pats.each { |pattern,replace|
          str.gsub!(/#{pattern}/, replace)
        }
        line = col[0..1].join(' ') + ' ' + str + "\n"
        newf.print line
      else
        newf.print line
      end
    }

    newf.close
  end

  # baserpmrc を雛形に
  #    #{dir}/rpmrc
  #    #{dir}/rpmmacros 
  # を生成する
  #
  def generate_rpmrc_and_rpmmacros(dir, baserpmrc)
    momo_assert{ File.directory?(dir) }
    momo_assert{ File.file?(baserpmrc) }

    rcfile="#{dir}/rpmrc"
    mcfile="#{dir}/rpmmacros"

    if File.exist?("#{dir}/OPTFLAGS")
      optfile = "#{dir}/OPTFLAGS"
    else
      optfile = nil 
    end

    copy_rpmrc(baserpmrc, rcfile, optfile)

    macrofiles = `grep macrofiles #{baserpmrc}`.chop
    if not rpm46?
      `echo '#{macrofiles}#{mcfile}' >> #{rcfile}`
    end
    
    File.open(mcfile, "w") {|f|
      f.puts <<EOS
%_topdir #{dir}
%_arch #{OPTS[:arch]}
%_host_cpu #{OPTS[:arch]}
%_host_vender momonga
%_host_os linux
%_numjobs #{OPTS[:numjobs]}
%smp_mflags -j%{_numjobs}
%_smp_mflags -j%{_numjobs}
EOS
      if OPTS[:enable_distcc] then #and $DISTCC_HOSTS.length > 1 then
        f.puts "%OmoiKondara_enable_distcc 1"
      else
        f.puts "%OmoiKondara_enable_distcc 0"
      end
      if OPTS[:debug_build] then
        f.puts <<EOS
%OmoiKondara_enable_debug 1
%__os_install_post    \
  /usr/lib/rpm/brp-compress \
  /usr/lib/rpm/modify-init.d \
  %{nil}
EOS
      else
        f.puts "%OmoiKondara_enable_debug 0"
      end
      if rpm46? then
        f.puts "%buildroot %{_tmppath}/%{name}-%{version}-%{release}-root-%(id -un)"
      end
    }
  end
  
  # #{dir}/rpmbuild.sh を生成
  #
  #
  def generate_rpmbuild_sh(dir)
    file = "#{dir}/rpmbuild.sh"
    File.open(file, "w+") {|f|
      args = ""
      args += generate_macrofiles(dir) if  rpm46?

      f.puts <<EOS
#!/bin/sh
# generated by lib/prepare.rb at #{Time.now}

rpmbuild --rcfile rpmrc #{args} --target #{OPTS[:arch]} $@ #{specdir}/#{specname}.spec
EOS
      f.chmod(0744)
    }
  end

  def make_dirs(dir)
    exec_command("cd #{dir} && mkdir -p SOURCES RPMS SRPMS SPECS BUILD")
  end
  def remove_dirs(dir)
    exec_command("cd #{dir} && rm -rf SOURCES RPMS SRPMS SPECS BUILD")
  end

  public
  def prepare_sources
    result = MOMO_UNDEFINED
    debug("prepare_sources #{specname}")

    generate_rpmrc_and_rpmmacros(specdir, "#{specdir}/../rpmrc")
    generate_rpmbuild_sh(specdir)
    make_dirs(specdir)

    result = MOMO_SUCCESS
  ensure
    debug("prepare_sources #{specname} returns #{result}")
    return result
  end


end # end of class Job
