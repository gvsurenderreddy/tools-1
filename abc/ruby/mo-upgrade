#!/usr/bin/ruby
# by Hiromasa YOSHIMOTO <y@momonga-linux.org>

require 'optparse'
require 'sqlite3'
require 'set'

OPTS = {}
Version = "0.0.1"

$:.unshift(File.dirname($0))
require 'lib/config.rb'
require 'lib/install.rb'
require 'lib/pkgdb.rb'

OPTS[:verbose]+=1
OPTS[:max_retry]=64
opt = OptionParser.new
opt.on('-q', '--quite', 'suppress verbose msg.') {|v| OPTS[:verbose]=-1 }
opt.on('-v', '--verbose', 'verbose msg.') {|v| OPTS[:verbose]+=1 }
opt.parse!(ARGV)


#
# 更新しないpackageの配列
# !!FIXME!!  設定ファイルを別途用意する
holds = [ "kernel", "lame", "lame-devel", "usolame-devel", "usolame" ]

d = PkgDB.new
d.open(OPTS[:pkgdb_filename], OPTS)

# install済のpackageと、そのbuildtimeを取得
installed = []
`rpm -qa --qf '%{NAME},%{VERSION},%{RELEASE},%{BUILDTIME}\n'`.each_line do |line|
  column = line.chomp.split(',')
  v  = column[1]
  v += "-#{column[2]}" if column[2]!=""
  installed.push([column[0],v,column[3].to_i])
end


STDERR.puts "Searching updated packages"  if OPTS[:verbose]>0
queue = Set.new
installed.each do |name,version,buildtime|

  next if holds.include?(name)

  found = false

  # obsoleteの処理
  sql = "SELECT pkgfile,comparison,version,buildtime FROM obsolete_tbl INNER JOIN pkg_tbl ON owner=id WHERE capability=='#{name}'"
  d.db.execute(sql) do |pkgfile,comparison,version1,buildtime1|
    next if !compare_version(version, comparison, version1)
    if buildtime.to_i != buildtime1 then
      STDERR.puts "#{name} is obsoleted by #{pkgfile}" if OPTS[:verbose]>1
      queue.add(pkgfile)
      found = true
    end
  end
  next if found

  # 同名かつbuildtimeの新しいpackageを探す
  sql = "SELECT pkgfile,buildtime FROM pkg_tbl WHERE pkgname=='#{name}'"
  d.db.execute(sql) do |pkgfile,ts|
    if ts.to_i != buildtime then
      STDERR.puts "#{name} is updated by #{pkgfile}" if OPTS[:verbose]>1
      queue.add(pkgfile)
      found = true
    end
  end

end

if queue.size == 0 then
  STDERR.puts "No updated package found."
  exit(0)
end

if OPTS[:verbose]>1 then
  queue.each do |file|
    STDERR.puts " #{file}" 
  end
end
STDERR.puts "#{queue.size} updated package(s) found"  if OPTS[:verbose]>0

STDERR.puts "Resolving dependencies" if OPTS[:verbose]>0

pkgs, msg = select_required_packages(d.db, queue.to_a, OPTS)

if msg then
  STDERR.puts "#{msg}, abort"
  exit(1)
end


cmd="rpm -vU --force #{pkgs.to_a.join(' ')}"
system(cmd)
abort("failed to #{cmd}") unless $?.to_i == 0

exit(0)

# Local Variables:
# mode: ruby
# indent-tabs-mode: nil
# End:
