#!/usr/bin/env ruby

WORK_DIR = "/dist/Current"
MIRROR_DIR = File.expand_path "/dist/development/PKGS"

PROG = $0
work_dir = File.expand_path WORK_DIR
LOG = "#{work_dir}/#{PROG.split(/\//)[-1]}.log"
MOMONGA = "http://dist.momonga-linux.org/pub/momonga/development"
MIRROR = "#{MOMONGA}/development/PKGS"
GENHDLIST = "sudo /usr/lib/anaconda-runtime/genhdlist"
PKGORDER = "/usr/lib/anaconda-runtime/pkgorder"
GETFULLCOMPS = "sudo /home/tom/bin/getfullcomps.py"
MAKESTAMP = "sudo /usr/lib/anaconda-runtime/makestamp.py"
#BUILDINSTALL = "sudo /usr/lib/anaconda-runtime/buildinstall"
BUILDINSTALL = "sudo ./buildinstall"
SPLITTREE = "sudo /usr/lib/anaconda-runtime/splittree.py"
CHKCOMPS = "/home/tom/bin/chkcomps"
DEV_DIR = work_dir + "/development"
COMPS_XML = DEV_DIR + "/i586/os/Momonga/base/comps.xml"
TREE_DIR = DEV_DIR + "/i586/os"
ISO_DIR = DEV_DIR + "/i586/iso"
JIGDO_DIR = DEV_DIR + "/i586/jigdo"
PKGS_DIR = DEV_DIR + "/PKGS"
VER = Time.new.strftime("%Y%m%d")

def do_cmd cmd
  begin
    f = open LOG, "a"
    f.print "=====================================\n"
    f.print Time.now.strftime("%H:%M:%S "), cmd, "\n"
    log = `#{cmd} 2>&1`
    f.print log
    f.print "\n"
    f.close
  rescue
    "#{PROG}: Aborted - #{cmd}(#{$?})\n"
    f.close
    exit $?
  end
end

`rm -f #{LOG}`

#  1. パッケージを最新に更新
# print "Syncing development packages - "
# STDOUT.flush
# cur_dir = Dir.pwd
# Dir.chdir work_dir + "/development/PKGS"
# do_cmd "lftp -c 'open #{MIRROR};mirror -e -n i586;mirror -e -n noarch'"
# Dir.chdir cur_dir
# print "done\n"

#  2. ツリーを掃除
print "Cleanup output trees - "
STDOUT.flush
do_cmd "sudo rm -rf #{DEV_DIR}"
do_cmd "mkdir -p #{DEV_DIR}/{PKGS/{SRPMS,i586,noarch},i586/{iso,jigdo,os}}"
print "done\n"

#  3. 固定ファイルを展開
print "Extracting fixed files - "
STDOUT.flush
do_cmd "tar xzvf #{work_dir}/fixed.files.tar.gz -C #{TREE_DIR}"
print "done\n"

#  4. current のパッケージをコピー
print "Copying current package files - "
STDOUT.flush
cur_dir = Dir.pwd
Dir.chdir MIRROR_DIR
do_cmd "ln -f i586/* #{PKGS_DIR}/i586"
do_cmd "ln -f noarch/* #{PKGS_DIR}/noarch"
Dir.chdir PKGS_DIR
do_cmd "ln -f i586/* #{TREE_DIR}/Momonga/RPMS"
do_cmd "ln -f noarch/* #{TREE_DIR}/Momonga/RPMS"
Dir.chdir cur_dir
print "done\n"

#  5. 1.0 のパッケージで上書き
# print "Overriding 1.0 packages - "
# STDOUT.flush
# cur_dir = Dir.pwd
# Dir.chdir work_dir + "/1/i586/os/Momonga/RPMS"
# do_cmd "ln -f * #{TREE_DIR}/Momonga/RPMS"
# Dir.chdir cur_dir
# print "done\n"

#  6. 重複しているパッケージの削除
print "Removing duplication packages - "
STDOUT.flush
do_cmd "chkrpmdup #{TREE_DIR}/Momonga/RPMS | bash"
print "done\n"

#  comps.xml のチェック
print "Checking comps.xml - "
STDOUT.flush
do_cmd "#{CHKCOMPS} -v #{TREE_DIR}/Momonga/base/comps.xml #{TREE_DIR}/Momonga/RPMS"
print "done\n"

#  7. comps パッケージの削除
print "Removing old comps package - "
STDOUT.flush
do_cmd "rm -f #{TREE_DIR}/Momonga/RPMS/comps-[0-9]*"
`find #{TREE_DIR}/ -name TRANS.TBL`.each do |f|
  do_cmd "sudo rm -f #{f}"
end
print "done\n"

#  8. ここ以降 anaconda 使用のため環境変数を設定
ENV["PYTHONPATH"] = "/usr/lib/anaconda:/usr/lib/anaconda-runtime"
ENV["LD_LIBRARY_PATH"] = "/usr/lib:/usr/X11R6/lib"

#  9. hdlist の作成
print "Generating hdlist - "
STDOUT.flush
do_cmd "#{GENHDLIST} --productpath Momonga #{TREE_DIR}"
print "done\n"

# 10. pkgorder の作成
print "Generating pkgorder - "
STDOUT.flush
cmd  = PKGORDER + " "
cmd += "--product Momonga "
cmd += "--file #{work_dir}/pkgorder "
cmd += TREE_DIR + " "
cmd += "i586"
do_cmd cmd
print "done\n"

# 13. hdlist の更新
print "Regenerating hdlist - "
STDOUT.flush
cmd  = GENHDLIST + " "
cmd += "--productpath Momonga "
cmd += "--fileorder #{work_dir}/pkgorder "
cmd += TREE_DIR
do_cmd cmd
print "done\n"

# # 10. comps.xml にパッケージリストを追記する
# print "Revising comps.xml - "
# STDOUT.flush
# comps_pkg_list = `#{GETFULLCOMPS} comps.xml #{work_dir}/development i586/os 2> #{work_dir}/comps.error`
# if File.size?(work_dir + "/comps.error")
#   print "mkmodevel: Aborted - package dependency error.\n"
#   exit 1
# end
# File.delete work_dir + "/comps.error"
# f = open "#{COMPS_XML}.new", "w"
# open(COMPS_XML).each do |l|
#   if l =~ /<\!--@@PACKAGES@@-->/
#     f.write comps_pkg_list
#   else
#     f.write l
#   end
# end
# f.close
# File.delete COMPS_XML
# File.rename COMPS_XML + ".new", COMPS_XML
# print "done\n"

# 11. .discinfo の作成
print "Generating .discinfo - "
STDOUT.flush
cmd  = MAKESTAMP + " "
cmd += "--releasestr='Momonga Linux #{VER}' "
cmd += "--arch=i586 "
cmd += "--discNum='1,2,3,4' "
cmd += "--baseDir=Momonga/base "
cmd += "--packagesDir=Momonga/RPMS "
cmd += "--pixmapsDir=Momonga/pixmaps "
cmd += "--outfile=#{TREE_DIR}/.discinfo"
do_cmd cmd
print "done\n"

# 12. comps パッケージの作成
print "Building new comps package - "
STDOUT.flush
macrofiles = "macrofiles: /usr/lib/rpm/macros:/usr/lib/rpm/%{_target}/macros:/usr/lib/rpm/macros.momonga:/usr/lib/rpm/%{_target}/macros.momonga:/etc/rpm/macros.specspo:/etc/rpm/macros.db1:/etc/rpm/macros.cdb:/etc/rpm/macros:/etc/rpm/%{_target}/macros:~/.rpmmacros:"
macrofiles += work_dir + "/rpmmacros\n"
f = open work_dir + "/rpmrc", "w"
open(work_dir + "/rpmrc.default").each do |l|
  f.print l
end
f.print macrofiles
f.close
f = open work_dir + "/rpmmacros", "w"
f.print "%_topdir #{work_dir}\n"
f.print "%_arch i586\n"
f.print "%_host_cpu i586\n"
f.print "%_host_vender momonga\n"
f.print "%_host_os linux\n"
f.print "%_numjobs 1\n"
f.close
cur_dir = Dir.pwd
Dir.chdir work_dir
do_cmd "mkdir -p SPECS BUILD RPMS/i586 SRPMS"
do_cmd "cp #{work_dir}/comps.spec #{work_dir}/SPECS"
do_cmd "rpmbuild -ba --rcfile rpmrc --define='basedir #{TREE_DIR}/Momonga/base' --define='compsversion 1' SPECS/comps.spec"
do_cmd "cp -a #{work_dir}/RPMS/i586/comps-* #{PKGS_DIR}/i586"
do_cmd "cp -a #{work_dir}/SRPMS/comps-* #{PKGS_DIR}/SRPMS"
do_cmd "cp -a #{work_dir}/RPMS/i586/comps-* #{TREE_DIR}/Momonga/RPMS"
do_cmd "rm -rf #{work_dir}/BUILD #{work_dir}/RPMS #{work_dir}/SRPMS #{work_dir}/rpmrc #{work_dir}/rpmmacros"
Dir.chdir cur_dir
print "done\n"

# 15. buildinstall の実行
print "Doing buildinstall - "
STDOUT.flush
do_cmd "mkdir -p #{work_dir}/buildinstall"
cmd  = BUILDINSTALL + " "
cmd += "--buildinstdir " + work_dir + "/buildinstall "
cmd += "--comp dist-7.0 "
cmd += "--version #{VER} "
cmd += "--release \'Momonga Linux #{VER}\' "
cmd += "--product Momonga "
cmd += "--prodpath Momonga "
cmd += TREE_DIR
cur_dir = Dir.pwd
Dir.chdir "/usr/lib/anaconda-runtime"
do_cmd cmd
Dir.chdir cur_dir
unless File.exist? TREE_DIR + "/isolinux/isolinux.bin"
  print "\n#{PROG}: Aborted - Please check tree\n"
  exit 1
end
print "done\n"

# 14. CD用分割ツリーの作成
print "Splitting tree for CD - "
STDOUT.flush
cmd  = SPLITTREE + " "
cmd += "--arch=i586 "
cmd += "--total-discs=4 "
cmd += "--bin-discs=4 "
cmd += "--release-string='Momonga Linux #{VER}' "
cmd += "--pkgorderfile=#{work_dir}/pkgorder "
cmd += "--distdir=#{TREE_DIR} "
cmd += "--productpath=Momonga"
do_cmd cmd
print "done\n"

# 16. CD用 hdlist 作成
print "Generating hdlist for CD - "
STDOUT.flush
cmd  = GENHDLIST + " "
cmd += "--productpath Momonga "
cmd += "--withnumbers "
cmd += "--fileorder #{work_dir}/pkgorder "
cmd += "#{TREE_DIR}-disc[1-4]"
do_cmd cmd
print "done\n"

# 17. DVD iso image 作成
print "Generating DVD iso image - "
STDOUT.flush
cmd  = "sudo mkhybrid "
cmd += "-r -J -d -L "
cmd += "-b isolinux/isolinux.bin -c isolinux/boot.cat "
cmd += "-no-emul-boot -boot-load-size 4 -boot-info-table "
cmd += "-V 'Momonga Linux DVD' "
cmd += "-o #{ISO_DIR}/MomongaLinux#{VER}-i586-dvd.iso "
cmd += TREE_DIR
do_cmd cmd
print "done\n"

# 18. CD iso image 作成
for n in 1..4
  print "Generating CD#{n} iso image - "
  STDOUT.flush
  cmd  = "sudo mkhybrid "
  cmd += "-r -J -d -L "
  if n == 1
    cmd += "-b isolinux/isolinux.bin -c isolinux/boot.cat "
    cmd += "-no-emul-boot -boot-load-size 4 -boot-info-table "
  end
  cmd += "-V 'Momonga Linux CD#{n}' "
  cmd += "-o #{ISO_DIR}/MomongaLinux#{VER}-i586-cd#{n}.iso "
  cmd += "#{TREE_DIR}-disc#{n}"
  do_cmd cmd
  print "done\n"
end

exit 0

# 19. MD5SUMS 作成
print "Generating MD5SUMS file - "
STDOUT.flush
cur_dir = Dir.pwd
Dir.chdir ISO_DIR
do_cmd "md5sum *.iso > #{JIGDO_DIR}/MD5SUMS"
Dir.chdir cur_dir
print "done\n"

# 20. ツリーを消す
print "Removing version dependent files - "
STDOUT.flush
do_cmd "sudo rm -rf #{TREE_DIR}-disc[1-4]"
do_cmd "sudo rm -rf #{TREE_DIR}/*"
print "done\n"

# 21. jigdo ファイルの生成
cur_dir = Dir.pwd
Dir.chdir JIGDO_DIR
["dvd", "cd1", "cd2", "cd3", "cd4"].each do |media|
  print "Generating #{media}'s .jigdo and .template - "
  STDOUT.flush
  iso = "MomongaLinux#{VER}-i586-#{media}.iso"
  cmd  = "jigdo-file make-template "
  cmd += "--cache=#{work_dir}/jigdo-cache.db "
  cmd += "--image=#{ISO_DIR}/#{iso} "
  cmd += "--jigdo=#{iso}.jigdo "
  cmd += "--template=#{iso}.template "
  cmd += "#{DEV_DIR}// "
  cmd += "--label Momonga=#{DEV_DIR} "
  cmd += "--uri Momonga=#{MOMONGA}/"
  do_cmd cmd
  jigdo = "#{JIGDO_DIR}/#{iso}.jigdo"
  newjigdo = "#{jigdo}.new"
  f = open newjigdo, "w"
  open(jigdo).each do |l|
      f.print l
    if l =~ /\[Servers\]/
      f.print "[Include #{MOMONGA}/i586/jigdo/mirrors.jigdo]\n"
    end
  end
  f.close
  do_cmd "gzip -9c #{newjigdo} > #{jigdo}"
  File.delete newjigdo
  print "done\n"
end
File.delete work_dir + "/jigdo-cache.db"
Dir.chdir cur_dir

# 22. iso イメージの削除
#print "Removing iso files - "
#STDOUT.flush
#do_cmd "sudo rm -f #{ISO_DIR}/*.iso"
#print "done\n"
