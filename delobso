#!/usr/bin/perl
use Getopt::Long;
my $pkgsdir = "";
my $target = "";
my $topdir = "";
my $dotfile = $ENV{'HOME'} . "/.OmoiKondara";

$pkgsdir = `pwd`;
chomp($pkgsdir);
$pkgsdir =~ s|tools|pkgs|;
$pkgsdir =~ s|/$||;

if (-r "$dotfile") {
	 open(DOT,"<$dotfile") or die "$dotfileが開けねえよゴルァ!!";
	 while(<DOT>) {
		  if (m/^\s*TOPDIR\s+(.*)/) {
			   $topdir=$1;
			   last;
		  }
		  next;
	 }
	 close(DOT);
}
else {
	 $topdir = getTopdir();
}

if ($pkgsdir eq "") {
	 $pkgsdir = getPkgsdir();
}

GetOptions("topdir=s",\$topdir,
		   "pkgsdir=s",\$pkgsdir,
		   "target=s",\$target,
		   "help|usage",\$help
		  );

if ($help) {
	 showhelp();
}

$target = getArch() if !$target;

$topdir  =~ s|/$||;

push(@rpms,$_) foreach(glob("$topdir/$target/*.rpm"));
push(@rpms,$_) foreach(glob("$topdir/noarch/*.rpm"));

print <<"EOM";
[Environment]
pkgs directory       : $pkgsdir
TOPDIR               : $topdir
Target Architecture  : $target
Clean up directories : $topdir/$target
                       $topdir/noarch
                       $topdir/SRPMS
EOM

@obsolete = listup_pkg(@rpms);
if (scalar(@obsolete) > 0) {
	 remove_pkg(@obsolete);
	 exit(0);
}
else {
	 print "削除するべきパッケージはありません．\n";
	 exit(1);
}

#-------------------------------------------------------------------------------
# Target Architecture を調べる (オモコンからパクッたんだYO!)
#
sub getArch {
	 $arch = `uname -m`;
	 chomp($arch);
	 if ($arch =~ m/i.86/) {
		  $target = "i586";
		  #$target = getInput();
	 }
	 elsif (($arch eq "alpha") || ($arch eq "mips")) {
		  open(PROC,"/proc/cpuinfo") or die "/proc/cpuinfoが読めねえよゴルァ!!";
		  while (<PROC>) {
			   if ((m/^cpu model\s*:\s*EV([0-9]).*$/) && ($1 eq "5")) {
					$target = "alphaev5";
			   }
			   elsif (m/^cpu model\s*:\s*R5900.*/) {
					$target = "mipsel";
			   }
			   next;
		  }
		  close(PROC);
	 }
	 elsif ($arch eq "ppc") {
		  $target = "ppc";
	 }
	 else {
		  $target = getArchInput();
	 }
	 return $target;
}

#-------------------------------------------------------------------------------
# STDINから入力を貰う
#
sub getArchInput {
	 print "ビルドアーキテクチャは noarch と何ですか?: ";
	 chomp($target = <STDIN>);
	 print "お掃除するのは  $topdir/$target と $topdir/noarch ? [y/N]: ";
	 chomp($yn = <STDIN>);
	 $yn = lc($yn);
	 if ($yn eq "y") {
		  return $target;
	 }
	 elsif ($yn eq '/' || $yn eq '[' || $yn eq ']') {
		  print "逝って良し\n";
		  getArchInput();
	 }
	 else {
		  print "もう一度お尋ねします．\n";
		  getArchInput();
	 }
}

#-------------------------------------------------------------------------------
# STDINから pkgs ディレクトリのパスを貰う
#
sub getPkgsdir {
	 my $pkgsdir = "";
	 print "pkgsディレクトリのフルパスは?: ";
	 chomp($pkgsdir = <STDIN>);
	 print "入力 $pkgsdir に間違いはないですね? [y/N]: ";
	 chomp($yn = <STDIN>);
	 $yn = lc($yn);
	 if ($yn eq "y") {
		  return $pkgsdir;
	 }
	 elsif ($yn eq '/' || $yn eq '[' || $yn eq ']') {
		  print "逝って良し\n";
		  getPkgsdir();
	 }
	 else {
		  print "もう一度お尋ねします．\n";
		  getPkgsdir();
	 }
}

#-------------------------------------------------------------------------------
# STDINから TOPDIR のパスを貰う
#
sub getTopdir {
	 my $topdir = "";
	 print "TOPDIRのフルパスは?: ";
	 chomp($topdir = <STDIN>);
	 print "入力 $topdir に間違いはないですね? [y/N]: ";
	 chomp($yn = <STDIN>);
	 $yn = lc($yn);
	 if ($yn eq "y") {
		  return $topdir;
	 }
	 elsif ($yn eq '/' || $yn eq '[' || $yn eq ']') {
		  print "逝って良し\n";
		  getTopdir();
	 }
	 else {
		  print "もう一度お尋ねします．\n";
		  getTopdir();
	 }
}

#-------------------------------------------------------------------------------
# OBSOLETEの存在， ディレクトリの存在を調べ，リストアップ
#
sub listup_pkg {
	 my(@rpms) = @_ if @_;
	 my @obso = ();
	 foreach $rpm(@rpms) {
		  my $pkg = `rpm -qp --queryformat "%{SOURCERPM}" $rpm`;
		  my $srpm = "$topdir/SRPMS/$pkg";
		  $pkg =~ s/-[^-]*-[^-]*$//;
		  if (-f "$pkgsdir/$pkg/OBSOLETE") {
			   push(@obso,$rpm);
			   push(@obso,$srpm);
		  }
		  elsif (! -d "$pkgsdir/$pkg") {
			   push(@obso,$rpm);
			   push(@obso,$srpm);
		  }
		  elsif (! -f "$srpm") {
			   push(@obso,$rpm);
		  }
	 }

	 {
		  my %u;
		  @obso = grep(!$u{$_}++, @obso);
	 }

	 return @obso;
}

#-------------------------------------------------------------------------------
# 削除するかどうかを確認し，Yesなら削除
#
sub remove_pkg {
	 my @obso = @_ if @_;
	 my $obsolist = $ENV{'HOME'} . "/OBSOLETE_PACKAGES";
	 my $date = localtime;
	 $count = scalar(@obso);
	 open(FILE,">>$obsolist") or die;
	 print FILE "OBSOLETE Packages list [created by $date]\n";
	 print FILE "\t$_\n" foreach (@obso);

	 print "OBSOLETE Packages [$count files]:\n";
	 print "\t$_\n" foreach (@obso);
	 print "\n$obsolist に リストを書き込みました．\n\n";
	 print "これらのパッケージを削除しますか? [y/n]: ";
	 chomp($yn = <STDIN>);
	 $yn = lc($yn);
	 if ($yn eq "y") {
		  foreach (@obso) {
			   unlink($_) and print "$_ を削除\n";
		  }
	 }
	 else {
		  print "削除せずに終了します．\n";
	 }
	 exit (0);
}

sub showhelp {
	 print <<HELP;
Usage: $0 [--topdir TOPDIR] [--pkgsdir pkgs directory]
          [--target Target Architecture] [--help]

topdir    : OmoiKondara の環境変数 TOPDIR
pkgsdir   : pkgs のパス
target    : ビルドターゲットアーキテクチャ (\%{_target})
help      : このヘルプメッセージ

何も引数を与えないと TOPDIRは ~/.OmoiKondara から読込みます．

pkgsdir は このスクリプトが CVSツリーの tools ディレクトリにあり，そこ
で実行していると仮定して算出します．

target は uname -m の出力， /proc/cpuinfo の cpu model 行を調べますが，
ppc など i586以外のアーキテクチャには対応していませんので，それらのアー
キテクチャについては 引数 --target を与えてください．

HELP
exit(0);
}
